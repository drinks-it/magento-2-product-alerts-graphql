# Mageplaza
#
# NOTICE OF LICENSE
#
# This source file is subject to the Mageplaza.com license that is
# available through the world-wide-web at this URL:
# https://www.mageplaza.com/LICENSE.txt
#
# DISCLAIMER
#
# Do not edit or add to this file if you wish to upgrade this extension to newer
# version in the future.
#
# @category    Mageplaza
# @package     Mageplaza_ProductAlertsGraphQl
# @copyright   Copyright (c) Mageplaza (https://www.mageplaza.com/)
# @license     https://www.mageplaza.com/LICENSE.txt

type Customer {
    mp_product_alert: MpProductAlertsCustomersOutput @doc(description: "Product alerts customer") @resolver(class: "Mageplaza\\ProductAlertsGraphQl\\Model\\Resolver\\Account")
}

type Mutation {
    MpProductAlertSubsriberDelete(
        input: CustomerDeleteInput @doc(description: "Information of the subscriber is delete.")
    ): MpProductAlertSubsriberDeleteOutput @resolver(class: "Mageplaza\\ProductAlertsGraphQl\\Model\\Resolver\\Customer\\Delete")
    MpProductAlertCustomerNotifyPriceDrops(
        input: CustomerSubmitInput @doc(description: "Information of the subscriber is submit.")
    ): MpMageplazaSubscriberOutput @resolver(class: "Mageplaza\\ProductAlertsGraphQl\\Model\\Resolver\\Customer\\Price")
    MpProductAlertCustomerNotifyInStock(
        input: CustomerSubmitInput @doc(description: "Information of the subscriber is submit.")
    ): MpMageplazaSubscriberOutput @resolver(class: "Mageplaza\\ProductAlertsGraphQl\\Model\\Resolver\\Customer\\Stock")
    MpProductAlertNotifyPriceDrops(
        input: GuestSubmitInput @doc(description: "Information of the subscriber is submit.")
    ): MpMageplazaSubscriberOutput @resolver(class: "Mageplaza\\ProductAlertsGraphQl\\Model\\Resolver\\Guest\\Price")
    MpProductAlertNotifyInStock(
        input: GuestSubmitInput @doc(description: "Information of the subscriber is submit.")
    ): MpMageplazaSubscriberOutput @resolver(class: "Mageplaza\\ProductAlertsGraphQl\\Model\\Resolver\\Guest\\Stock")
}

type MpProductAlertsCustomersOutput {
    customerId: Int @doc(description: "Customer Id")
    out_of_stock (
        filter: MpProductAlertsSubscriberFilterInput @doc(description: "Identifies which MpProductAlertsSubscriberFilterInput attributes to search for and return.")
        pageSize: Int = 5 @doc(description: "How many items should show on the page?")
        currentPage: Int = 1 @doc(description: "Allow page number to start with 1")
    ): MpProductAlertsSubscriber @resolver(class: "Mageplaza\\ProductAlertsGraphQl\\Model\\Resolver\\GetSubscriber\\Stock") @doc(description: "The total number of results returned when a query is applied")
    product_price (
        filter: MpProductAlertsSubscriberFilterInput @doc(description: "Identifies which MpProductAlertsSubscriberFilterInput attributes to search for and return.")
        pageSize: Int = 5 @doc(description: "How many items should show on the page?")
        currentPage: Int = 1 @doc(description: "Allow page number to start with 1")
    ): MpProductAlertsSubscriber @resolver(class: "Mageplaza\\ProductAlertsGraphQl\\Model\\Resolver\\GetSubscriber\\Price") @doc(description: "The total number of results returned when a query is applied")
}

input CustomerSubmitInput {
    productSku: String! @doc(description: "The Sku assigned to the product.")
}

input CustomerDeleteInput {
    id: Int! @doc(description: "The ID number assigned to the product.")
}

input GuestSubmitInput {
    email: String! @doc(description: "The customer Email."),
    productSku: String! @doc(description: "The Sku assigned to the product.")
}

input MpProductAlertsSubscriberFilterInput {
    subscriber_id: FilterTypeInput @doc(description: "Subscriber Id")
    customer_id: FilterTypeInput @doc(description: "Customer Id")
    customer_email: FilterTypeInput @doc(description: "Customer Email")
    product_id: FilterTypeInput @doc(description: "Product Id")
    customer_group: FilterTypeInput @doc(description: "Customer Group")
    status: FilterTypeInput @doc(description: "Status")
    type: FilterTypeInput @doc(description: "Type")
    old_price: FilterTypeInput @doc(description: "Old Price")
    store_id: FilterTypeInput @doc(description: "Store Id")
    website_id: FilterTypeInput @doc(description: "Website Id")
    send_count: FilterTypeInput @doc(description: "Send Count")
    subscribe_updated_at: FilterTypeInput @doc(description: "Subscribe Updated At")
    subscribe_created_at: FilterTypeInput @doc(description: "Subscribe Created At")
    last_send_date: FilterTypeInput @doc(description: "Last Send Date")
}

type MpProductAlertSubsriberDeleteOutput {
    status: Boolean
}

type MpProductAlertsSubscriber {
    total_count: Int @doc(description: "The total number of results returned when a query is applied"),
    items: [MpMageplazaSubscriberOutput] @doc(description: "MpMageplazaFaqsCategory data is satisfied"),
    pageInfo: PageInfo @doc(description: "An object that includes the page_info and currentPage values specified in the query")
}

type MpMageplazaSubscriberOutput {
    subscriber_id: Int @doc(description: "Subscriber Id")
    customer_id: Int @doc(description: "Customer Id")
    customer_email: String @doc(description: "Customer Email")
    product_id: Int @doc(description: "Product Id")
    customer_group: String @doc(description: "Customer Group")
    status: Int @doc(description: "Status")
    type: Int @doc(description: "Type")
    old_price: Float @doc(description: "Old Price")
    store_id: Int @doc(description: "Store Id")
    website_id: Int @doc(description: "Website Id")
    send_count: Int @doc(description: "Send Count")
    subscribe_updated_at: String @doc(description: "Subscribe Updated At")
    subscribe_created_at: String @doc(description: "Subscribe Created At")
    last_send_date: String @doc(description: "Last Send Date")
}

type PageInfo {
    pageSize: Int @doc(description: "How many items should show on the page.")
    currentPage: Int @doc(description: "Allows to using paging it start with 1.")
    hasNextPage: Boolean @doc(description: "Is next page")
    hasPreviousPage: Boolean @doc(description: "Is previous page")
    startPage: Int @doc(description: "Start page")
    endPage: Int @doc(description: "End page")
}